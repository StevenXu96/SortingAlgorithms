{"version":3,"sources":["Visualizer/Algorithms.js","Visualizer/Visualizer.js","App.js","index.js"],"names":["order","order_quick","quickSort","array","low","high","pi","pivot","push","i","j","temp","partition","length","copy","slice","bubble_order","insertion_order","heap_order","heapify","n","largest","l","r","swap","Visualizer","props","state","speed","max_speed","color","message","size","height","darkMode","sorting","handleChange","bind","event","target","value","name","this","setState","prevState","window","location","reload","new_array","min","max","Math","floor","random","setTimeout","prevStateArray","alert","anime","mergeSort","midIndex","firstHalf","secondHalf","sortedArray","Algorithms","executeInstruction","array_original","m","hold","idx","document","getElementById","style","backgroundColor","className","type","onChange","htmlFor","marginLeft","onClick","resetArray","popup","bubbleSort","insertionSort","heapSort","map","key","checkColor","React","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.0df2aa68.chunk.js","sourcesContent":["const order = [];\n\nexport const mergeSort = (array, low, high) => {\n    if (low === high){\n        order.push([low, array[low]])\n        return [array, [array[low]], order];\n    }\n    const midIndex = Math.floor((high-low)/2 + low);\n    const firstHalf = (mergeSort(array, low, midIndex))[1];\n    const secondHalf = (mergeSort(array, midIndex+1, high))[1];\n\n    const sortedArray = [];\n    let i = 0;\n    let j = 0;\n    while (i < firstHalf.length && j < secondHalf.length){\n        if (firstHalf[i] < secondHalf[j]){\n            sortedArray.push(firstHalf[i]);\n            order.push([i+low+j, firstHalf[i]]);\n            i++;\n        }\n        else{\n            sortedArray.push(secondHalf[j]);\n            order.push([j+i+low, secondHalf[j]])\n            j++;\n        }\n    }\n    if (i === firstHalf.length){\n        while (j < secondHalf.length){\n            sortedArray.push(secondHalf[j]);\n            order.push([j+i+low, secondHalf[j]]);\n            j++;\n        }\n    }\n    else{\n        while (i < firstHalf.length){\n            sortedArray.push(firstHalf[i]);\n            order.push([i+low+j, firstHalf[i]]);\n            i++;\n        }\n    }\n    if (sortedArray.length === array.length){\n        const copy = order.slice();\n        copy.push([\"Now you may generate a new array!\", 0, 0])\n        order.length = 0;\n        return [array, sortedArray, copy];\n    }\n    return [array, sortedArray, order];\n};\n\nconst order_quick = [];\n\nexport const quickSort = (array, low, high) => {\n    if (low < high){\n        const pi = partition(array, low, high);\n        quickSort(array, low, pi - 1)\n        quickSort(array, pi + 1, high)\n    }\n\n    if (low === 0 && high === array.length-1){\n        const copy = order_quick.slice()\n        copy.push([\"Now you may generate a new array!\", 0, 0])\n        order_quick.length = 0\n        return copy\n    }\n    return order_quick\n\n}\n\nfunction partition(array, low, high){\n    const pivot = array[high];\n    order_quick.push([high])\n    let i = (low - 1);\n    for (let j = low; j <= high-1; j++){\n        if (array[j]<pivot){\n            i++;\n            const temp = array[i];\n            order_quick.push([i, array[j]])\n            array[i] = array[j];\n            order_quick.push([j, temp])\n            array[j] = temp;\n        }\n    }\n\n    const temp = array[i+1];\n    order_quick.push([i+1, array[high]])\n    array[i+1] = array[high];\n    order_quick.push([high, temp])\n    array[high] = temp;\n\n    return (i + 1)\n}\n\nconst bubble_order = []\nexport const bubbleSort = (array_original) => {\n    const array = array_original.slice()\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                const temp = array[j]\n                bubble_order.push([j, array[j+1]])\n                bubble_order.push([j+1, temp])\n                array[j] = array[j + 1]\n                array[j + 1] = temp\n            }\n            else{\n                bubble_order.push([j, array[j]])\n            }\n        }\n    }\n\n    const copy = bubble_order.slice()\n    copy.push([\"Now you may generate a new array!\", 0, 0])\n    bubble_order.length = 0\n    return copy\n}\n\nconst insertion_order = []\nexport const insertionSort = (array_original) => {\n    const array = array_original.slice()\n    for (let i = 1; i < array.length; i++){\n        const temp = array[i];\n        insertion_order.push([i])\n        for (let j = 0; j < i; j++){\n            if (array[j] <= temp){\n                insertion_order.push([j, array[j]])\n            }\n            else{\n                for (let m = i-1; m >= j; m--){\n                    const hold = array[m+1]\n                    insertion_order.push([m, hold])\n                    insertion_order.push([m+1, array[m]])\n                    array[m+1] = array[m]\n                    array[m] = hold\n                }\n                break\n            }\n        }\n    }\n    const copy = insertion_order.slice()\n    copy.push([\"Now you may generate a new array!\", 0, 0])\n    insertion_order.length = 0\n    return copy\n}\n\nconst heap_order = []\nexport const heapSort = (array_original) => {\n    const array = array_original.slice();\n    const n = array_original.length;\n\n    for (let i = Math.floor(n/2 - 1); i >=0; i--){\n        heapify(array, n, i);\n    }\n\n    for (let i = n-1; i > 0; i--){\n        const temp = array[0];\n        heap_order.push([0, array[i]])\n        heap_order.push([i, temp])\n        array[0] = array[i];\n        array[i] = temp;\n\n        heapify(array, i, 0);\n    }\n\n    const copy = heap_order.slice();\n    heap_order.length = 0;\n    copy.push([\"Now you may generate a new array!\", 0, 0])\n    return copy\n}\n\nfunction heapify(array, n, i){\n    let largest = i;\n    const l = 2*i + 1;\n    const r= 2*i + 2;\n\n    if (l < n && array[l] > array[largest]){\n        largest = l\n    }\n    if (r < n && array[r] > array[largest]){\n        largest = r\n    }\n    if (largest !== i){\n        const swap = array[i];\n        heap_order.push([i, array[largest]])\n        heap_order.push([largest, swap])\n        array[i] = array[largest];\n        array[largest] = swap;\n\n        heapify(array, n, largest)\n    }\n}\n","import React from 'react'\nimport './Visualizer.css'\nimport * as Algorithms from './Algorithms'\n\nclass Visualizer extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            speed: 5,\n            max_speed: 11,\n            array: [],\n            color: null,\n            pivot: null,\n            message: \"\",\n            size: 0,\n            height: 100,\n            darkMode: false,\n            sorting: false,\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(event){\n        const {value, name} = event.target;\n        if (name === \"darkMode\"){\n            this.setState(prevState => {\n                return {\n                    darkMode: !prevState.darkMode\n                }\n            })\n        }\n        else{\n            this.setState({[name]: value})\n        }\n    }\n\n    resetArray(){\n        if (this.state.sorting){\n            window.location.reload(true);\n        }\n        else {\n            const new_array = [];\n            for (let i = 0; i < this.state.size; i++) {\n                new_array.push(getRandomInt(5, this.state.height));\n            }\n            this.setState({\n                array: new_array,\n                color: null,\n                pivot: null,\n                message: \"\"\n            })\n        }\n    }\n\n    executeInstruction(swap, i){\n        const speed = this.state.max_speed - this.state.speed;\n        setTimeout(() => {\n            const prevStateArray = this.state.array.slice();\n            prevStateArray[swap[0]] = swap[1]\n            this.setState({\n                array: prevStateArray,\n                color: swap[0]\n            })\n        }, speed*i);\n    }\n\n    mergeSort() {\n        if (this.state.array.length === 0){\n            alert(\"Please adjust the size, then click \\\"Generate New Array\\\".\")\n        }\n        else {\n            this.setState({\n                color: null,\n                pivot: null,\n                sorting: true,\n                message: \"Merge Sort has a time complexity of n*log(n)\"\n            })\n            const speed = this.state.max_speed - this.state.speed;\n            const anime = (Algorithms.mergeSort(this.state.array, 0, this.state.array.length - 1))[2];\n            for (let i = 0; i < anime.length; i++) {\n                const swap = anime[i];\n                if (swap.length === 3) {\n                    setTimeout(() => {\n                        this.setState({message: swap[0], sorting: false})\n                    }, i * speed)\n                } else {\n                    this.executeInstruction(swap, i);\n                }\n            }\n        }\n    }\n\n    quickSort(){\n        if (this.state.array.length === 0){\n            alert(\"Please adjust the size, then click \\\"Generate New Array\\\".\")\n        }\n        else {\n            this.setState({\n                color: null,\n                pivot: null,\n                sorting: true,\n                message: \"Quick Sort has a time complexity of n*log(n)\"\n            })\n            const speed = this.state.max_speed - this.state.speed;\n            const copy = this.state.array.slice()\n            const anime = (Algorithms.quickSort(copy, 0, copy.length - 1))\n            for (let i = 0; i < anime.length; i++) {\n                const swap = anime[i];\n                if (swap.length === 1) {\n                    setTimeout(() => {\n                        this.setState({pivot: swap[0]})\n                    }, speed * i)\n                } else if (swap.length === 3) {\n                    setTimeout(() => {\n                        this.setState({message: swap[0], sorting: false})\n                    }, i * speed)\n                } else {\n                    this.executeInstruction(swap, i);\n                }\n            }\n        }\n    }\n\n    bubbleSort(){\n        if (this.state.array.length === 0){\n            alert(\"Please adjust the size, then click \\\"Generate New Array\\\".\")\n        }\n        else {\n            this.setState({\n                color: null,\n                pivot: null,\n                sorting: true,\n                message: \"Bubble Sort has a time complexity of n^2. I suggest you just click \\\"Reset\\\"...\"\n            })\n            const speed = this.state.max_speed - this.state.speed;\n            const anime = (Algorithms.bubbleSort(this.state.array))\n            for (let i = 0; i < anime.length; i++) {\n                const swap = anime[i]\n                if (swap.length === 3) {\n                    setTimeout(() => {\n                        this.setState({message: swap[0], sorting: false})\n                    }, speed * i)\n                } else {\n                    this.executeInstruction(swap, i);\n                }\n            }\n        }\n    }\n\n    insertionSort(){\n        if (this.state.array.length === 0){\n            alert(\"Please adjust the size, then click \\\"Generate New Array\\\".\")\n        }\n        else {\n            this.setState({\n                color: null,\n                pivot: null,\n                sorting: true,\n                message: \"Insertion Sort has a time complexity of n^2. I suggest you just click \\\"Reset\\\"...\"\n            })\n            const speed = this.state.max_speed - this.state.speed;\n            const anime = (Algorithms.insertionSort(this.state.array))\n            for (let i = 0; i <= anime.length - 1; i++) {\n                const swap = anime[i]\n                if (swap.length === 2) {\n                    this.executeInstruction(swap, i);\n                } else if (swap.length === 3) {\n                    setTimeout(() => {\n                        this.setState({message: swap[0], sorting: false})\n                    }, i * speed)\n                } else {\n                    setTimeout(() => {\n                        this.setState({pivot: swap[0]})\n                    }, speed * i)\n                }\n            }\n        }\n    }\n\n    heapSort(){\n        if (this.state.array.length === 0){\n            alert(\"Please adjust the size, then click \\\"Generate New Array\\\".\")\n        }\n        else{\n            this.setState({\n                color: null,\n                pivot: null,\n                sorting: true,\n                message: \"Heap Sort has a time complexity of n*log(n)\"\n            })\n            const speed = this.state.max_speed - this.state.speed;\n            const anime = (Algorithms.heapSort(this.state.array));\n            for (let i = 0; i < anime.length; i++) {\n                const swap = anime[i]\n                if (swap.length === 3) {\n                    setTimeout(() => {\n                        this.setState({message: swap[0], sorting: false})\n                    }, speed * i)\n                } else {\n                    this.executeInstruction(swap, i);\n                }\n            }\n        }\n    }\n\n    checkColor(idx){\n        if (idx === this.state.pivot){\n            return 'yellow'\n        }\n        else if (idx === this.state.color){\n            return 'red'\n        }\n        else{\n            if (this.state.darkMode){\n                return 'blue'\n            }\n            else{\n                return 'gray'\n            }\n        }\n    }\n\n    popup(){\n        alert(\"To check out another algorithm, wait until sorting is complete or click \\\"Reset\\\"\")\n    }\n\n\n    render(){\n        document.getElementById(\"body\").style.backgroundColor = this.state.darkMode? 'black' : 'whitesmoke'\n        return(\n            <div className=\"everything\">\n                <header className=\"top-header\" style={{color: this.state.darkMode? 'white' : 'black'}}>\n                    Sorting Algorithm Visualization\n                </header>\n                <div className=\"array-container\">\n                    <nav className=\"NavBar\">\n                        <ul className=\"Nav\" style={{color: this.state.darkMode? 'white':'black'}}>\n                            <li><label>Dark Mode </label>\n                                <input type=\"checkbox\" value={this.state.darkMode} onChange={this.handleChange} className=\"darkMode\" name=\"darkMode\"/>\n                                <label htmlFor=\"darkMode\" />\n                            </li>\n                            <li><h4>1. Customize Array</h4></li>\n                            <li>\n                                <div className=\"sliders\">\n                                    <label>Speed</label>\n                                    <input type=\"range\" min=\"1\" max=\"10\" value={this.state.speed} onChange={this.handleChange} name=\"speed\"\n                                           style={{marginLeft: \"5px\"}}/>\n                                    <br />\n                                    <label>Size</label>\n                                    <input type=\"range\" min=\"50\" max=\"560\" value={this.state.size} onChange={this.handleChange} name=\"size\"\n                                           style={{marginLeft: \"22px\"}}/>\n                                    <br />\n                                    <label>Height</label>\n                                    <input type=\"range\" min=\"5\" max=\"480\" value={this.state.height} onChange={this.handleChange} name=\"height\"\n                                           style={{marginLeft: \"1px\"}}/>\n                                </div>\n                            </li>\n                            <br />\n                            <li><button className=\"generate\" onClick={() => this.resetArray()}>{this.state.sorting? \"Reset\":\"Generate New Array\"}</button></li>\n                            <li><h4>2. Pick an Algorithm</h4></li>\n                            <li><button className=\"merge-sort\" onClick={() => this.state.sorting? this.popup(): this.mergeSort()}>Merge Sort</button></li>\n                            <li><button className=\"quick-sort\" onClick={() => this.state.sorting? this.popup(): this.quickSort()}>Quick Sort</button></li>\n                            <li><button className=\"bubble-sort\" onClick={() => this.state.sorting? this.popup(): this.bubbleSort()}>Bubble Sort</button></li>\n                            <li><button className=\"insertion-sort\" onClick={() => this.state.sorting? this.popup(): this.insertionSort()}>Insertion Sort</button></li>\n                            <li><button className=\"heap-sort\" onClick={() => this.state.sorting? this.popup(): this.heapSort()}>Heap Sort</button></li>\n                        </ul>\n                    </nav>\n                    <div className=\"arraybar-container\">\n                        {this.state.array.map((value, idx) => (\n                            <div className=\"array-bar\"\n                                 key={idx}\n                                 style={{height: `${value}px`,\n                                     backgroundColor: this.checkColor(idx)}}>\n                            </div>\n                        ))}\n                    </div>\n                    <br />\n                    <h2 className=\"message\" style={{color: this.state.darkMode? 'gray': 'black'}}>{this.state.message}</h2>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default Visualizer","import React from 'react'\nimport Visualizer from './Visualizer/Visualizer'\n\nexport default function App(){\n    return(\n        <div className=\"app\" >\n            <Visualizer />\n        </div>\n    )\n}\n\n","import React from 'react'\nimport App from './App'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}